{"version":3,"sources":["webpack:///./App/Components/Elements/Notifications/notification-bar.jsx","webpack:///./App/Containers/push-notification.jsx"],"names":["NotificationBar","state","onClose","setState","show","clearTimeout","timer","React","Component","this","setTimeout","props","autoShow","className","content","duration","has_content_close","type","in","timeout","classNames","enterDone","unmountOnExit","Children","map","child","cloneElement","bind","onClick","icon","propTypes","PropTypes","string","oneOfType","object","bool","PushNotification","push_notifications","notification","idx","key","array","connect","ui"],"mappings":"y+BAMMA,E,yQACFC,MAAQ,G,EAcRC,QAAU,WACN,EAAKC,SAAS,CAAEC,MAAM,GAAS,WAC3BC,aAAa,EAAKC,U,wPAjBAC,IAAMC,W,kDAGZ,WACXC,KAAKR,MAAMG,OACZK,KAAKH,MAAQI,WAAW,WACpB,EAAKP,SAAS,CAAEC,MAAM,KACvBK,KAAKE,MAAMC,UAAY,Q,6CAK9BP,aAAaI,KAAKH,S,+BASb,aAODG,KAAKE,MALLE,EAFC,EAEDA,UACAC,EAHC,EAGDA,QACAC,EAJC,EAIDA,SACAC,EALC,EAKDA,kBACAC,EANC,EAMDA,KAGJ,OACI,kBAAC,gBAAD,CACIC,GAAIT,KAAKR,MAAMG,KACfe,QAASJ,GAAY,IACrBK,WAAY,CACRC,UAAW,+BAEfC,eAAa,GAEb,yBACIT,UAAWO,IAAW,mBAAoB,CACtC,yBAAmC,SAATH,EAC1BJ,eAGJ,yBAAKA,UAAU,6BAEPG,EACIT,IAAMgB,SAASC,IAAIV,EAAS,SAAAW,GAAK,OAC7BlB,IAAMmB,aAAaD,EAAO,CAAEvB,QAAS,EAAKA,QAAQyB,KAAK,OAEzDb,IAGXE,GACC,yBACIY,QAASnB,KAAKP,QAAQyB,KAAKlB,MAC3BI,UAAU,4BAEV,kBAAC,IAAD,CAAMgB,KAAK,YAAYhB,UAAU,mC,gCAS7Db,EAAgB8B,UAAY,CACxBjB,UAAWkB,IAAUC,OACrBlB,QAAWiB,IAAUE,UAAU,CAC3BF,IAAUG,OACVH,IAAUC,SAEdhB,kBAAmBe,IAAUI,KAC7BlB,KAAmBc,IAAUC,QAGlBhC,QC/EToC,EAAmB,SAAC,GAAD,SACrBC,mBAEmBb,IAAI,SAACc,EAAcC,GAAQ,IAClC3B,EAAsC0B,EAAtC1B,SAAUE,EAA4BwB,EAA5BxB,QAASC,EAAmBuB,EAAnBvB,SAAUE,EAASqB,EAATrB,KACrC,OACI,kBAAC,EAAD,CACIuB,IAAKD,EACL3B,SAAUA,EACVE,QAASA,EACTC,SAAUA,EACVE,KAAMA,GAAQ,OACdD,mBAAmB,OAMnCoB,EAAiBN,UAAY,CACzBO,mBAAoBN,IAAUU,OAGnBC,sBACX,kBAAa,CACTL,mBADJ,EAAGM,GACwBN,qBAFhBK,CAIbN","file":"js/push-notification.a28eb57bbddd29245a13.js","sourcesContent":["import classNames        from 'classnames';\nimport PropTypes         from 'prop-types';\nimport React             from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Icon              from 'Assets/icon.jsx';\n\nclass NotificationBar extends React.Component {\n    state = {};\n\n    componentDidMount() {\n        if (!this.state.show) {\n            this.timer = setTimeout(() => {\n                this.setState({ show: true });\n            }, this.props.autoShow || 500);\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    onClose = () => {\n        this.setState({ show: false }, () => {\n            clearTimeout(this.timer);\n        });\n    };\n\n    render() {\n        const {\n            className,\n            content,\n            duration,\n            has_content_close,\n            type, // TODO: add support for different type of notifications\n        } = this.props;\n\n        return (\n            <CSSTransition\n                in={this.state.show}\n                timeout={duration || 500}\n                classNames={{\n                    enterDone: 'notification-bar--is-active',\n                }}\n                unmountOnExit\n            >\n                <div\n                    className={classNames('notification-bar', {\n                        'notification-bar--info': type === 'info',\n                        className,\n                    })}\n                >\n                    <div className='notification-bar__message'>\n                        {\n                            has_content_close ?\n                                React.Children.map(content, child =>\n                                    React.cloneElement(child, { onClose: this.onClose.bind(this) })\n                                )\n                                : content\n                        }\n                    </div>\n                    { !has_content_close &&\n                        <div\n                            onClick={this.onClose.bind(this)}\n                            className='notification-bar__button'\n                        >\n                            <Icon icon='IconClose' className='notification-bar__icon' />\n                        </div>\n                    }\n                </div>\n            </CSSTransition>\n        );\n    }\n}\n\nNotificationBar.propTypes = {\n    className: PropTypes.string,\n    content  : PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.string,\n    ]),\n    has_content_close: PropTypes.bool,\n    type             : PropTypes.string,\n};\n\nexport default NotificationBar;\n","import PropTypes       from 'prop-types';\nimport React           from 'react';\nimport { connect }     from 'Stores/connect';\nimport NotificationBar from '../Components/Elements/Notifications/notification-bar.jsx';\n\nconst PushNotification = ({\n    push_notifications,\n}) => (\n    push_notifications.map((notification, idx) => {\n        const { autoShow, content, duration, type } = notification;\n        return (\n            <NotificationBar\n                key={idx}\n                autoShow={autoShow}\n                content={content}\n                duration={duration}\n                type={type || 'info'}\n                has_content_close={true}\n            />\n        );\n    })\n);\n\nPushNotification.propTypes = {\n    push_notifications: PropTypes.array,\n};\n\nexport default connect(\n    ({ ui }) => ({\n        push_notifications: ui.push_notifications,\n    })\n)(PushNotification);\n"],"sourceRoot":""}